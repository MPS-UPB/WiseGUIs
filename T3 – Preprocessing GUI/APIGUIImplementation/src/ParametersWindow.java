/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Liz
 */

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.swing.border.EmptyBorder;

//creez de fiecare data o fereastra noua? cam da

public class ParametersWindow extends javax.swing.JFrame {

    public ParametersWindow() {
                
        initComponents();
    }
    
    /**
     * Creates new form ParametersWindow2
     */
    public ParametersWindow(String titlu) {
        
        super(titlu);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 433, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 306, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
     private void okClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
         
        dispose();
    }
     
      private void cancelClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
          dispose();
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ParametersWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ParametersWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ParametersWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ParametersWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                ParametersWindow window = new ParametersWindow();    
                //plaseaza fereastra in centrul ecranului
                window.setLocationRelativeTo(null);
                
                LinkedHashMap<String,String> test = new LinkedHashMap<String,String>();
                test.put("Nume fisier", "JTextField");
                test.put("Unghi", "JSpinner");
                test.put("Nume param3", "JTextField");
                test.put("Nume param4", "JComboBox");
                window.generareCampuri(test);                 
                window.revalidate();
                window.setVisible(true);              
               
              
           //     window.repaint();
                
            }
        });
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    //map dummy de transmis
    void generareCampuri(LinkedHashMap<String, String> params) {
        
        this.setLayout(new GridLayout(params.size() + 1, 2, 10, 35));
       
        //this.set(new EmptyBorder(10, 10, 10, 10));
        JButton okButton = new JButton("OK");
        JButton cancelButton = new JButton("Cancel");
       
        this.add(okButton, params.size(), 0);
        this.add(cancelButton, params.size(), 1);
       
        okButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ParametersWindow.this.okClicked(evt);
            }
        });  
       
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ParametersWindow.this.cancelClicked(evt);
            }
        });       
        //sau il initializez in constructor
        int ySmallPanel = -23;
        int k;
        //for (Map.Entry<String, String> param : params.entrySet()) {
        ArrayList<String> keys = new ArrayList<String>(params.keySet());
        for(k=params.size()-1;k>=0;k--)
        { 
        String paramName = keys.get(k);
        String graphicType = params.get(keys.get(k));
        
        //genereaza un label cu numele parametrului (atributul name din element corespunzator parametrului)
        
        JLabel numeParam = new JLabel(paramName);
        numeParam.setBounds(10, ySmallPanel, 50, 50);
        numeParam.setHorizontalAlignment(SwingConstants.RIGHT);
        this.add(numeParam, ySmallPanel, 0);        
        
            //in functie de tipul parametrului, genereaza elementul grafic asociat 
           //(am putea direct sa stabilim o corespondenta intre 
           //elementele grafice si sa stabilim de la inceput ce generam, 
           //nu de fiecare data cand avem fereastra de parametri sa stam sa analizam)        
            
           if (graphicType.equals("JTextField")) {
              JTextField elem = new JTextField(10); 
              this.add(elem, ySmallPanel, 1);  
           }

           if (graphicType.equals("JComboBox")) {
                JComboBox elem = new JComboBox();
                elem.setPreferredSize(new Dimension(140,30));
                this.add(elem, ySmallPanel, 1);  
           }

           if (graphicType.equals("JSpinner")) {
                SpinnerNumberModel spinnerModel = new SpinnerNumberModel(0.0,-1000.0,1000.0,1.0);
                JSpinner elem = new JSpinner(spinnerModel);
                elem.setBounds(70,ySmallPanel,140,50);
                this.add(elem, ySmallPanel, 1);  
           }          
           
    //    ySmallPanel--;  
       }        
       
     
    }    
}


//sa generez niste ferestre de avertizare, in cazul in care user-ul nu a completat niste campuri!!!
//sa nu-l las pana nu completeaza sau da cancel
//buton de cancel - sau se inchide direct fereastra
//cand se inchide fereastra de parametri nu se intampla nimic!!
